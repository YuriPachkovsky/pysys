#[sources.suricata]
#type = "file"
#file_key = "suricata"
#host_key = "host"
#ignore_older_secs = 600
#include = [ "/var/log/suricata/eve.json" ]

#[sources.nginx]
#type = "file"
#file_key = "nginx"
#host_key = "host"
#ignore_older_secs = 600
#include = [ "/var/log/nginx/*access*.log" ]

#[sources.waf]
#type = "file"
#file_key = "waf"
#host_key = "host"
#ignore_older_secs = 600
#include = [ "/var/log/nginx/modsec/modsec_audit.log" ]

#[transforms.suricata_filter_only_alert]
#type = "filter"
#inputs = [ "suricata" ]
#condition = 'parse_json!(.message).alert.signature_id != null'

#[transforms.suricata_transform]
#type = "remap"
#inputs = [ "suricata_filter_only_alert" ]
#source = """
#. = parse_json!(.message)

#.event.outcome = .http.status
#.event.start = .flow.start
#.event.start = parse_timestamp!(.event.start, format: "%Y-%m-%dT%H:%M:%S%.6f%z")
#.event.start = format_timestamp!(.event.start, format: "%s")

#.event.severity = to_int!(.alert.severity) + 1
#.event.kind = .event_type
#if .event.outcome == "allowed" {
#        .type = "ids"
#} else {
#        .type = "ips"
#}
#.source.adress = .src_ip
#if .http.hostname != null {
#	.destination.adress = .http.hostname
#} else {
#	.destination.adress = .dest_ip
#}
#if .http.status != null {
#	.event.outcome = .http.status
#} else {
#        .event.outcome = .alert.action      
#}

#.suricata.eve.alert.signature_id = .alert.signature_id
#.suricata.eve.alert.signature = .alert.signature
#.url.original = .http.url
#.event.payload = .alert.signature
#.port = to_string!(.dest_port)
#.method = to_string!(.http.http_method)
#"""

#[transforms.modsec_transform]
#type = "remap"
#inputs = [ "waf" ]
#source = """
#.message = parse_json!(.message)
#.message.transaction.event.severity  = to_int!(.message.transaction.messages[0].details.severity) - 1
#.message.transaction.source.adress = del(.message.transaction.client_ip)
#if .message.transaction.request.headers.Host != null {
#	.mesmessage":"{'name': 'loop5', 'readRequest': 0, 'writeRequest': 0, 'readBytes': 0, 'writeBytes': 0, 'busy': 0, 'metrica': 'diskio', 'timestamp': 1643062981.9222314}sage.transaction.destination.adress = to_string!(.message.transaction.request.headers.Host)
#} else {
#	.message.transaction.destination.adress = to_string!(.message.transaction.request.headers.host)
#}
#.message.transaction.suricata.eve.alert.signature = del(.message.transaction.messages[0].message)
#.message.transaction.event.outcome = del(.message.transaction.response.http_code)
#.message.transaction.suricata.eve.alert.signature_id = del(.message.transaction.messages[0].details.ruleId)
#.message.transaction.url.original = del(.message.transaction.request.uri)
#.message.transaction.event.payload = del(.message.transaction.messages[0].details.data)
#.message.transaction.event.start =  to_string!(.message.transaction.time_stamp)
#.message.transaction.event.start = parse_timestamp!(.message.transaction.event.start, format: "%a %b %d  %H:%M:%S %Y")
#.message.transaction.event.start = format_timestamp!(.message.transaction.event.start, format: "%s")
#.message.transaction.method = to_string!(.message.transaction.request.method)
#.message.transaction.port = to_string!(.message.transaction.host_port)
#. = .message.transaction
#.type = "waf"
#"""

#[transforms.to_db_transform]
#type = "remap"
#inputs = ["modsec_transform"]
#inputs = ["suricata_transform"]
#inputs = [ "suricata_transform", "modsec_transform" ]
#source = """
#tmp = .
#.todb.ruleId = to_string!(.suricata.eve.alert.signature_id)
#.todb.ip = to_string!(.source.adress)
#.todb.destination = to_string!(.destination.adress)
#.todb.details = to_string!(.suricata.eve.alert.signature)
#.todb.responseCode = to_string!(.event.outcome)
#.todb.url = to_string!(.url.original)
#.todb.payload = to_string!(.event.payload)
#.todb.type = to_string!(.type)
#.todb.severityLevel = to_int!(.event.severity)
#.todb.eventDate = to_string!(.event.start)
#.todb.port = to_string!(.port)
#.todb.method = to_string!(.method)
#.todb.id = uuid_v4()
#. = .todb
#.message = encode_json(tmp)
#"""

#[transforms.transform_ready]
#type = "remap"
#inputs = [ "to_db_transform" ]
#source = """

#"""


#[sinks.logs-sink]
#type = "clickhouse"
#inputs = [ "transform_ready"]
#database = "waf"
#endpoint = "http://localhost:8123"
#table = "waf_logs"
#skip_unknown_fields = true
#encoding.timestamp_format = "unix"
#encoding.only_fields = ["destination", "ip", "payload", "responseCode", "ruleId", "type", "severityLevel", "url", "eventDate", "details", "message", "id", "port", "method"]

[sources.host_metrics]
type = "exec"
mode = "streaming"
command = ["python3", "/collector.py", "5", "http://qwe.com/sts"]


[transforms.metrics_transform]
type = "remap"
inputs = [ "host_metrics" ]
source = """
. = parse_json!(.message)
.id = uuid_v4()
.eventDate = to_unix_timestamp(to_timestamp!(del(.eventDate)))
"""


[transforms.metrics_set]
type = "route"
inputs = [ "metrics_transform" ]

  [transforms.metrics_set.route]
  network = "match!(.metrica , r'network')"
  fsstat = "match!(.metrica , r'fsstat')"
  uptime = "match!(.metrica , r'boot')"
  cpu = "match!(.metrica , r'cpu')"
  diskio = "match!(.metrica , r'diskio')"
  memory = "match!(.metrica , r'memory')"
  load = "match!(.metrica , r'load')"
  socket_summary = "match!(.metrica , r'socket_summary')"
  stubstatus = "match!(.metrica , r'stubstatus')"


#[sinks.metrics-sink_cpu]
#type = "clickhouse"
#inputs = [ "metrics_set.cpu"]
#database = "waf"
#encoding.timestamp_format = "unix"
#skip_unknown_fields = true
#endpoint = "http://localhost:8123"
#table = "cpu"

#[sinks.metrics-sink_diskio]
#type = "clickhouse"
#inputs = [ "metrics_set.diskio"]
#database = "waf"
#encoding.timestamp_format = "unix"
#skip_unknown_fields = true
#endpoint = "http://localhost:8123"
#table = "diskio"

#[sinks.metrics-sink_fsstat]
#type = "clickhouse"
#inputs = [ "metrics_set.fsstat"]
#database = "waf"
#encoding.timestamp_format = "unix"
#skip_unknown_fields = true
#endpoint = "http://localhost:8123"
#table = "fsstat"

#[sinks.metrics-sink_load]
#type = "clickhouse"
#inputs = [ "metrics_set.load"]
#database = "waf"
#encoding.timestamp_format = "unix"
#skip_unknown_fields = true
#endpoint = "http://localhost:8123"
#table = "load"

#[sinks.metrics-sink_memory]
#type = "clickhouse"
#inputs = [ "metrics_set.memory"]
#database = "waf"
#encoding.timestamp_format = "unix"
#skip_unknown_fields = true
#endpoint = "http://localhost:8123"
#table = "memory"

#[sinks.metrics-sink_network]
#type = "clickhouse"
#inputs = [ "metrics_set.network"]
#database = "waf"
#encoding.timestamp_format = "unix"
#skip_unknown_fields = true
#endpoint = "http://localhost:8123"
#table = "network"

#[sinks.metrics-sink_network_summary]
#type = "clickhouse"
#inputs = [ "metrics_set.network_summary"]
#database = "waf"
#encoding.timestamp_format = "unix"
#skip_unknown_fields = true
#endpoint = "http://localhost:8123"
#table = "network_summary"

#[sinks.metrics-sink_socket_summary]
#type = "clickhouse"
#inputs = [ "metrics_set.socket_summary"]
#database = "waf"
#encoding.timestamp_format = "unix"
#skip_unknown_fields = true
#endpoint = "http://localhost:8123"
#table = "socket_summary"

#wait new docker image with fix type duration
#[sinks.metrics-sink_uptime]
#type = "clickhouse"
#inputs = [ "metrics_set.uptime"]
#database = "waf"
#encoding.timestamp_format = "unix"
#skip_unknown_fields = true
#endpoint = "http://localhost:8123"
#table = "uptime"

[sinks.metrics-sink_stubstatus]
type = "clickhouse"
inputs = [ "metrics_set.stubstatus"]
database = "waf"
encoding.timestamp_format = "unix"
skip_unknown_fields = true
endpoint = "http://localhost:8123"
table = "stubstatus"

#[sinks.sin]
#type = "console"
#inputs = [ "metrics_set.stubstatus"]
#target = "stdout"
#encoding = "json"
